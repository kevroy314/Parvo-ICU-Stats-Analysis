<!DOCTYPE html>
<title>Parvo ICU Gender, Weight, Treatment Time, Age, and Result</title>
<link rel="shortcut icon" href="favicon.ico" />
<meta charset="utf-8">

<script src="d3.v3.min.js"></script>
<script src="jquery-1.8.3.min.js"></script>

<style title="svgStyles">
	body {
		font: 10px sans-serif;
	}

	.axis path, .axis line {
		fill: none;
		stroke: #000;
		shape-rendering: crispEdges;
	}

	.dot-male {
		stroke: #000000;
		fill: #0000FF;
	}

	.dot-female {
		stroke: #000000;
		fill: #FF0000;
	}

	.box-male {
		stroke: #000000;
		fill: #0000FF;
	}

	.box-female {
		stroke: #000000;
		fill: #FF0000;
	}
	
	div#pop-up {
		display: none;
		position:absolute;
		color: white;
		font-size: 14px;
		background: rgba(0,0,0,0.5);
		padding: 5px 10px 5px 10px;
		-moz-border-radius: 5px 5px;
		border-radius: 5px 5px;
	}
	
	div#pop-up-title {
		font-size: 15px;
		width:200px;
		margin-bottom: 4px;
		font-weight: bolder;
	}
	
	div#pop-up-content {
		font-size: 12px;
	}
	
	div#pop-desc {
		width: 150px;
	}
	
	div#pop-img {
		font-size: 30px;
		font-weight: bolder;
	}
	
	.sexy-button {
		-moz-box-shadow:inset 0px 1px 0px 0px #8394b3;
		-webkit-box-shadow:inset 0px 1px 0px 0px #8394b3;
		box-shadow:inset 0px 1px 0px 0px #8394b3;
		background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #6d8ae3), color-stop(1, #2263d4) );
		background:-moz-linear-gradient( center top, #6d8ae3 5%, #2263d4 100% );
		filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#6d8ae3', endColorstr='#2263d4');
		background-color:#6d8ae3;
		-moz-border-radius:6px;
		-webkit-border-radius:6px;
		border-radius:6px;
		border:1px solid #516ec2;
		display:inline-block;
		color:#f0fbfd;
		font-family:arial;
		font-size:15px;
		font-weight:bold;
		padding:6px 24px;
		text-decoration:none;
		text-shadow:1px 1px 0px #2e3fab;
	}
	.sexy-button:hover {
		background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #2263d4), color-stop(1, #6d8ae3) );
		background:-moz-linear-gradient( center top, #2263d4 5%, #6d8ae3 100% );
		filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#2263d4', endColorstr='#6d8ae3');
		background-color:#2263d4;
		color:#d0dbed;
	}
	.sexy-button:active {
		position:relative;
		top:1px;
	}	
</style>

<script>
	var MILLISECONDS_IN_A_DAY = 86400000;
	var DOT_NET_DATETIME_MIN = "0001-01-01T00:00:00";
	
	var adopted_male = new Array();
	var adopted_female = new Array();
	var nadopted_male = new Array();
	var nadopted_female = new Array();
	
	var viewState = 0;
	var scaleStateY = 0;
	var scaleStateX = 0;
	var weightScaleFactor = 4;
	var svgShrink = {horizontal: 30, vertical: 60};
	var margin = {top: 20, right: 20, bottom: 30, left: 40};
	var legendDomain = ["Female","Male","Not Adopted (Square)","Adopted (Circle)"];
	var legendRange = ["red","blue","black","black"];
	var popupFadeInTime = 100;
	var popupFadeOutTime = 10;
	var popupWidth = 300;
	var popupReverseOffset = 150;
	var popupMargins = {x: 50, y: 35};
	var legendOffset = {x: 20, y: 20};
	var legendMargin = {x: 4, y: 4};
	var legendTextHeightAdjuster = 8;
	var axisLabelOffset = 6;
	var legendTextSize = ".35em";
	var hiddenStateOpacity = 0.1;
	var logScaleBase = 5;
	var noWeightListedRadius = 4;
	
	var width = window.innerWidth - svgShrink.horizontal - margin.left - margin.right;
	var	height = window.innerHeight - svgShrink.vertical - margin.top - margin.bottom;
	
	function changeView()
	{
		if(viewState == 0)
		{
			svg.selectAll(".dot-male").on("mouseleave",null).on("mouseover",null).on("mousemove",null).attr("fill-opacity",hiddenStateOpacity).attr("stroke-opacity",hiddenStateOpacity);
			svg.selectAll(".dot-female").on("mouseleave",null).on("mouseover",null).on("mousemove",null).attr("fill-opacity",hiddenStateOpacity).attr("stroke-opacity",hiddenStateOpacity);
			moveMeanLine(failedStats,1000);
			viewState = 1;
		}
		else if(viewState == 1)
		{
			svg.selectAll(".dot-male").on("mouseleave",mouseLeaveItem).on("mouseover",mouseOverItem).on("mousemove",mouseMoveItem).attr("fill-opacity",1).attr("stroke-opacity",1);
			svg.selectAll(".dot-female").on("mouseleave",mouseLeaveItem).on("mouseover",mouseOverItem).on("mousemove",mouseMoveItem).attr("fill-opacity",1).attr("stroke-opacity",1);
			svg.selectAll(".box-male").on("mouseleave",null).on("mouseover",null).on("mousemove",null).attr("fill-opacity",hiddenStateOpacity).attr("stroke-opacity",hiddenStateOpacity);
			svg.selectAll(".box-female").on("mouseleave",null).on("mouseover",null).on("mousemove",null).attr("fill-opacity",hiddenStateOpacity).attr("stroke-opacity",hiddenStateOpacity);
			moveMeanLine(successStats,1000);
			viewState = 2;
		}
		else if(viewState == 2)
		{
			svg.selectAll(".box-male").on("mouseleave",mouseLeaveItem).on("mouseover",mouseOverItem).on("mousemove",mouseMoveItem).attr("fill-opacity",1).attr("stroke-opacity",1);
			svg.selectAll(".box-female").on("mouseleave",mouseLeaveItem).on("mouseover",mouseOverItem).on("mousemove",mouseMoveItem).attr("fill-opacity",1).attr("stroke-opacity",1);
			moveMeanLine(allStats,1000);
			viewState = 0;
		}
	}
	
	function transitionCircles(className,data,duration)
	{
		svg.selectAll(className).data(data)
			.transition().duration(duration)
			.attr("cx", function(d) { return x(d.TimeInParvoICUDays); })
			.attr("cy", function(d) { return y(d.AgeInDaysAtIntake); });
	}
	
	function transitionRect(className,data,duration)
	{
		svg.selectAll(className).data(data)
			.transition().duration(duration)
			.attr("x", function(d) { return x(d.TimeInParvoICUDays); })
			.attr("y", function(d) { return y(d.AgeInDaysAtIntake); });
	}
	
	function transitionLine(className,x1,y1,x2,y2,duration)
	{
		svg.selectAll(className)
			.transition().duration(duration)
			.attr("x1", x1)
			.attr("y1", y1)
			.attr("x2", x2)
			.attr("y2", y2)
	}
	
	function changeScaleY()
	{
		var stateItem = allStats;
		if(viewState == 1) stateItem = failedStats;
		else if(viewState == 2) stateItem = successStats;
		if(scaleStateY == 0)
		{
			y = d3.scale.log()
				.base(logScaleBase)
				.domain(d3.extent(globalData, function(d) { return d.AgeInDaysAtIntake; })).nice()
				.range([height ,0]);
			transitionCircles(".dot-female",adopted_female,1000);
			transitionCircles(".dot-male",adopted_male,1000);
			transitionRect(".box-female",nadopted_female,1000);
			transitionRect(".box-male",nadopted_male,1000);
			transitionLine(".hMeanLine",0,Math.round(y(stateItem.AgeStats.mean)),
									   width,Math.round(y(stateItem.AgeStats.mean)),1000);
			svg.selectAll(".y").transition().duration(1000).call(yAxis.scale(y));
			scaleStateY = 1;
		}
		else if (scaleStateY == 1)
		{
			
			y = d3.scale.linear()
				.domain(d3.extent(globalData, function(d) { return d.AgeInDaysAtIntake; })).nice()
				.range([height ,0]);
			transitionCircles(".dot-female",adopted_female,1000);
			transitionCircles(".dot-male",adopted_male,1000);
			transitionRect(".box-female",nadopted_female,1000);
			transitionRect(".box-male",nadopted_male,1000);
			transitionLine(".hMeanLine",0,Math.round(y(stateItem.AgeStats.mean)),
									   width,Math.round(y(stateItem.AgeStats.mean)),1000);
			svg.selectAll(".y").transition().duration(1000).call(yAxis.scale(y));
			scaleStateY = 0;
		}
	}
	
	function changeScaleX()
	{
		var stateItem = allStats;
		if(viewState == 1) stateItem = failedStats;
		else if(viewState == 2) stateItem = successStats;
		if(scaleStateX == 0)
		{
			x = d3.scale.linear()
				.domain([0,35])//d3.extent(globalData, function(d) { return d.TimeInParvoICUDays; })).nice()
				.range([0,width]);
			transitionCircles(".dot-female",adopted_female,1000);
			transitionCircles(".dot-male",adopted_male,1000);
			transitionRect(".box-female",nadopted_female,1000);
			transitionRect(".box-male",nadopted_male,1000);
			transitionLine(".vMeanLine",Math.round(x(allStats.DaysInICUStats.mean)),0,
										Math.round(x(allStats.DaysInICUStats.mean)),height,1000);
			svg.selectAll(".x").transition().duration(1000).call(xAxis.scale(x));
			scaleStateX = 1;
		}
		else if (scaleStateX == 1)
		{
			x = d3.scale.linear()
				.domain(d3.extent(globalData, function(d) { return d.TimeInParvoICUDays; })).nice()
				.range([0 ,width]);
			transitionCircles(".dot-female",adopted_female,1000);
			transitionCircles(".dot-male",adopted_male,1000);
			transitionRect(".box-female",nadopted_female,1000);
			transitionRect(".box-male",nadopted_male,1000);
			transitionLine(".vMeanLine",Math.round(x(allStats.DaysInICUStats.mean)),0,
										Math.round(x(allStats.DaysInICUStats.mean)),height,1000);
			svg.selectAll(".x").transition().duration(1000).call(xAxis.scale(x));
			scaleStateX = 0;
		}
	}
	
	function mouseOverItem(d)
	{
		$("#pop-up").fadeOut(popupFadeOutTime,function () {
			if(d3.event!=null)
			{
				var popLeft = d3.event.pageX + popupMargins.x;
				var popTop = d3.event.pageY - popupMargins.y;
				
				if(popLeft+popupWidth>width)
					popLeft-=popupWidth+popupReverseOffset;
			}
			if(!(typeof(d.AnimalName)==='undefined'))
			{
				$("#pop-up-title").html(d.AnimalName);
				var weightString = "Unk lbs";
				if(d.WeightInLbs!=-1)
					weightString = d.WeightInLbs + " lbs";
				$("#pop-img").html(weightString);
				$("#pop-desc").html("ICU Time: " + (Math.round(d.TimeInParvoICUDays*100)/100) + " days.</br>Intake Age: " + (Math.round(d.AgeInDaysAtIntake*100)/100) + " days.");
			}
			else if (!(typeof(d.AgeStats.mean)==='undefined'))
			{
				$("#pop-up-title").html("Statistics");
				$("#pop-img").html("");
				$("#pop-desc").html("<table><tr><td>Mean Days in ICU: </td><td>" + (Math.round(d.DaysInICUStats.mean*100)/100) + "</td></tr><tr><td>Mean Age (Days): </td><td>" + (Math.round(d.AgeStats.mean*100)/100) + "</td></tr><tr><td>Mean Weight (lbs): </td><td>" + (Math.round(d.WeightStats.mean*100)/100) + "</td></tr><tr><td>% Female (%): </td><td>" + (Math.round(d.GenderStats.mean*10000)/100))+"</td></tr></table>";
				popLeft = width*2/3;
				popTop = height/4;
				
			}
			$("#pop-up").css({"left":popLeft,"top":popTop});
			$("#pop-up").fadeIn(popupFadeInTime);
		});
	}
	
	function mouseLeaveItem(d)
	{
		$("#pop-up").fadeOut(popupFadeOutTime);
	}
	
	function mouseMoveItem(d)
	{
		var popLeft = d3.event.pageX + popupMargins.x;
		var popTop = d3.event.pageY - popupMargins.y;
	
		if(popLeft+popupWidth+popupMargins.x>width)
					popLeft-=popupWidth+popupReverseOffset;
		if(!(typeof(d.AgeStats)==='undefined'))
		{
			popLeft = width*2/3;
			popTop = height/4;
		}
		$("#pop-up").css({"left":(popLeft),"top":(popTop)});
	}
	
	function addCirclePointClass(cssClassName,data)
	{
		svg.selectAll(".dot")
			.data(data)
			.enter().append("circle")
				.attr("class", cssClassName)
				.attr("r", function(d) { if(d.WeightInLbs==-1) return noWeightListedRadius; else return d.WeightInLbs/weightScaleFactor; })
				.attr("cx", function(d) { return x(d.TimeInParvoICUDays);})
				.attr("cy", function(d) { return y(d.AgeInDaysAtIntake);})
				.on("mouseover",mouseOverItem)
				.on("mouseleave",mouseLeaveItem)
				.on("mousemove",mouseMoveItem);
	}
	
	function addRectPointClass(cssClassName,data)
	{
		svg.selectAll(".rect")
			.data(data)
			.enter().append("rect")
				.attr("class", cssClassName)
				.attr("x", function(d) { return x(d.TimeInParvoICUDays);})
				.attr("y", function(d) { return y(d.AgeInDaysAtIntake);})
				.attr("width", function(d) { if(d.WeightInLbs==-1) return noWeightListedRadius; else return d.WeightInLbs/weightScaleFactor; })
				.attr("height", function(d) { if(d.WeightInLbs==-1) return noWeightListedRadius; else return d.WeightInLbs/weightScaleFactor; })
				.on("mouseover",mouseOverItem)
				.on("mouseleave",mouseLeaveItem)
				.on("mousemove",mouseMoveItem);
	}
	
	function addMeanLines(data)
	{
		addLine([data],Math.round(x(data.DaysInICUStats.mean)),0,
				Math.round(x(data.DaysInICUStats.mean)),height,
				Math.round(data.WeightStats.mean),
				"rgb("+Math.round(data.GenderStats.mean*255)+",0,"+Math.round((1-data.GenderStats.mean)*255)+")",
				"vMeanLine");
		addLine([data],0,Math.round(y(data.AgeStats.mean)),
				width,Math.round(y(data.AgeStats.mean)),
				Math.round(data.WeightStats.mean),
				"rgb("+Math.round(data.GenderStats.mean*255)+",0,"+Math.round((1-data.GenderStats.mean)*255)+")",
				"hMeanLine");
	}
	
	function moveMeanLine(data,duration)
	{
		svg.selectAll(".vMeanLine")
			.data([data])
			.transition().duration(duration)
				.attr("x1",Math.round(x(data.DaysInICUStats.mean)))
				.attr("y1",0)
				.attr("x2",Math.round(x(data.DaysInICUStats.mean)))
				.attr("y2",height)
				.attr("stroke-width",Math.round(data.WeightStats.mean))
				.attr("stroke","rgb("+Math.round(data.GenderStats.mean*255)+",0,"+Math.round((1-data.GenderStats.mean)*255)+")");
		svg.selectAll(".hMeanLine")
			.data([data])
			.transition().duration(duration)
				.attr("x1",0)
				.attr("y1",Math.round(y(data.AgeStats.mean)))
				.attr("x2",width)
				.attr("y2",Math.round(y(data.AgeStats.mean)))
				.attr("stroke-width",Math.round(data.WeightStats.mean))
				.attr("stroke","rgb("+Math.round(data.GenderStats.mean*255)+",0,"+Math.round((1-data.GenderStats.mean)*255)+")");
	}
	
	function addLine(data,x1,y1,x2,y2,thickness,color,cssClassName)
	{
		svg.selectAll(".line")
			.data(data)
			.enter().append("line")
				.attr("x1", x1)
				.attr("y1", y1)
				.attr("x2", x2)
				.attr("y2", y2)
				.attr("stroke-width",thickness)
				.attr("stroke",color)
				.attr("class",cssClassName)
				.on("mouseover",mouseOverItem)
				.on("mouseleave",mouseLeaveItem)
				.on("mousemove",mouseMoveItem);
	}
</script>

<body>

<div id="pop-up">
	<div id="pop-up-title"></div>
	<div id="pop-up-content">
		<table>
			<tr>
				<td>
					<div id="pop-img"></div>
				</td>
				<td>
					<div id="pop-desc"></div>
				</td>
			</tr>
		</table>
	</div>
</div>

<script>
	function Statistics(values)
	{
		this.values = values;
		this.mean = undefined;
		this.median = undefined;
		this.firstQuartile = undefined;
		this.secondQuartile = undefined;
		this.thirdQuartile = undefined;
		this.stdDev = undefined;
		
		this.calculateStats = function(values)
		{
			//Check if values has been updated
			if(values != undefined)
				this.values = values;
			
			//Calculate mean
			var sum = 0;
			for(var i = 0; i < this.values.length;i++)
				sum+=this.values[i];
			this.mean = sum/this.values.length;
			
			//Calculate standard deviation
			sum = 0;
			for(var i = 0; i < this.values.length;i++)
				sum+=((this.values[i]-this.mean)*(this.values[i]-this.mean));
			sum/=this.values.length;
			this.stdDev = Math.sqrt(sum);
			
			//Sort values for calculating quartiles and median
			this.values.sort();
			
			//Save divisions for frequent use
			var div2 = this.values.length/2;
			var div4 = this.values.length/4;
			
			//If the array length is divisible by two, set the median to the average of the middle two values
			if(div2%1===0)
				this.median = (this.values[div2-1]+this.values[div2])/2;
			else
				this.median = this.values[Math.floor(div2)];
			if(div4%1===0)
			{
				this.firstQuartile = (this.values[div4-1]+this.values[div4])/2;
				this.thirdQuartile = (this.values[div4+div4+div4-1]+this.values[div4+div4+div4])/2;
			}
			else
			{
				this.firstQuartile = this.values[Math.floor(div4)];
				this.thirdQuartile = this.values[Math.floor(div4+div4+div4)];
			}
			//The median is the same thing as the second quartile
			this.secondQuartile = this.median;
		}
	}
</script>

<script>
	var x = d3.scale.linear()
		.range([0, width]);
	
	var y = d3.scale.linear()
		.range([height ,0]);;

	var color = d3.scale.ordinal().domain(legendDomain).range(legendRange);

	var xAxis = d3.svg.axis()
		.scale(x)
		.orient("bottom");
		
	var formatNumber = d3.format(",.0f");
				
	var yAxis = d3.svg.axis()
		.scale(y)
		.orient("left")
		.tickFormat(function(d) { return formatNumber(d); });

	var svg = d3.select("body").append("svg")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
		.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			
	var globalData;
	var allStats = {DaysInICUStats: 0, AgeStats: 0, WeightStats: 0, GenderStats: 0};
	var successStats = {DaysInICUStats: 0, AgeStats: 0, WeightStats: 0, GenderStats: 0};
	var failedStats = {DaysInICUStats: 0, AgeStats: 0, WeightStats: 0, GenderStats: 0};
	var allCount = 0, successCount = 0, failedCount = 0;
	
	d3.json("test20112012.json", function(error, data) {
		globalData = data;
		
		var parvoDeathCount = 0;
		var adoptionCount = 0;
		
		var DaysInICU = new Array();
		var Age = new Array();
		var Weight = new Array();
		var Gender = new Array();
		var sDaysInICU = new Array();
		var sAge = new Array();
		var sWeight = new Array();
		var sGender = new Array();
		var fDaysInICU = new Array();
		var fAge = new Array();
		var fWeight = new Array();
		var fGender = new Array();
		var numPups2012 = 0;
		var numPups2011 = 0;
		var success2012 = 0;
		var success2011 = 0;
		var diedofparvo2012 = 0;
		var diedofparvo2011 = 0;
		data.forEach(function (d){
			if(d!=null&&d.DateOfBirth!=DOT_NET_DATETIME_MIN)
			{
				d.AnimalName = d.Name;
				d.WeightInLbs = +d.WeightInLbs;
				d.AnimalGender = d.AnimalGender.toLowerCase();
				d.AgeRangeWhenCollected = +d.AgeRangeWhenCollected;
				var date = Date.parse(d.DateOfBirth.replace("T"," "));
				var idate = Date.parse(d.IntakeDateTime.replace("T", " "));
				d.DateOfBirth = date;
				d.IntakeDateTime = idate;
				if(d.IntakeDateTime>=Date.parse("01-01-2012")&&d.IntakeDateTime<Date.parse("01-01-2013"))
					numPups2012++;
				if(d.IntakeDateTime>=Date.parse("01-01-2011")&&d.IntakeDateTime<Date.parse("01-01-2012"))
					numPups2011++;
				d.AgeInDaysAtIntake = (((idate)-date)/MILLISECONDS_IN_A_DAY);
				d.TimeInParvoICUDays = parseFloat(d.TimeInParvoICU.split(":")[0]);
				d.DiedOfParvo = d.DiedOfParvo;
				var addWeight = noWeightListedRadius;
				if(d.WeightInLbs!=-1) addWeight = d.WeightInLbs/weightScaleFactor;
				if(d.DiedOfParvo)
				{
					if(d.IntakeDateTime>=Date.parse("01-01-2012")&&d.IntakeDateTime<Date.parse("01-01-2013"))
						diedofparvo2012++;
					if(d.IntakeDateTime>=Date.parse("01-01-2011")&&d.IntakeDateTime<Date.parse("01-01-2012"))
						diedofparvo2011++;
					parvoDeathCount++;
				}
				if(d.Adopted)
				{
					allCount++;
					successCount++;
					if(d.IntakeDateTime>=Date.parse("01-01-2012")&&d.IntakeDateTime<Date.parse("01-01-2013"))
						success2012++;
					if(d.IntakeDateTime>=Date.parse("01-01-2011")&&d.IntakeDateTime<Date.parse("01-01-2012"))
						success2011++;
					DaysInICU.push(d.TimeInParvoICUDays);
					sDaysInICU.push(d.TimeInParvoICUDays);
					Age.push(d.AgeInDaysAtIntake);
					sAge.push(d.AgeInDaysAtIntake);
					Weight.push(addWeight);
					sWeight.push(addWeight);
					Gender.push(d.AnimalGender=="female"?0:1);
					sGender.push(d.AnimalGender=="female"?0:1);
					
					if(d.AnimalGender=="female")
						adopted_female.push(d);
					else
						adopted_male.push(d);
					adoptionCount++;
				}
				else
				{
					allCount++;
					failedCount++;
					
					DaysInICU.push(d.TimeInParvoICUDays);
					fDaysInICU.push(d.TimeInParvoICUDays);
					Age.push(d.AgeInDaysAtIntake);
					fAge.push(d.AgeInDaysAtIntake);
					Weight.push(addWeight);
					fWeight.push(addWeight);
					Gender.push(d.AnimalGender=="female"?0:1);
					fGender.push(d.AnimalGender=="female"?0:1);
					
					if(d.AnimalGender=="female")
						nadopted_female.push(d);
					else
						nadopted_male.push(d);
				}
			}
		});
		
		allStats.DaysInICUStats = new Statistics(DaysInICU);
		allStats.DaysInICUStats.calculateStats();
		allStats.AgeStats = new Statistics(Age);
		allStats.AgeStats.calculateStats();
		allStats.WeightStats = new Statistics(Weight);
		allStats.WeightStats.calculateStats();
		allStats.GenderStats = new Statistics(Gender);
		allStats.GenderStats.calculateStats();
		
		successStats.DaysInICUStats = new Statistics(sDaysInICU);
		successStats.DaysInICUStats.calculateStats();
		successStats.AgeStats = new Statistics(sAge);
		successStats.AgeStats.calculateStats();
		successStats.WeightStats = new Statistics(sWeight);
		successStats.WeightStats.calculateStats();
		successStats.GenderStats = new Statistics(sGender);
		successStats.GenderStats.calculateStats();
		
		failedStats.DaysInICUStats = new Statistics(fDaysInICU);
		failedStats.DaysInICUStats.calculateStats();
		failedStats.AgeStats = new Statistics(fAge);
		failedStats.AgeStats.calculateStats();
		failedStats.WeightStats = new Statistics(fWeight);
		failedStats.WeightStats.calculateStats();
		failedStats.GenderStats = new Statistics(fGender);
		failedStats.GenderStats.calculateStats();
		
		x.domain(d3.extent(data, function(d) { return d.TimeInParvoICUDays; })).nice();
		
		y.domain(d3.extent(data, function(d) { return d.AgeInDaysAtIntake; })).nice();

		 svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(xAxis)
			.append("text")
				.attr("class", "label")
				.attr("x", width)
				.attr("y", -axisLabelOffset)
				.style("text-anchor", "end")
				.text("Days in ICU");

		globalYscale = svg.append("g")
			.attr("class", "y axis")
			.call(yAxis)
			.append("text")
				.attr("class", "label")
				.attr("transform", "rotate(-90)")
				.attr("y", axisLabelOffset)
				.attr("dy", ".71em")
				.style("text-anchor", "end")
				.text("Age (days)");

		addMeanLines(allStats);
		
		addCirclePointClass("dot-female",adopted_female);
		addCirclePointClass("dot-male",adopted_male);
		addRectPointClass("box-female",nadopted_female);
		addRectPointClass("box-male",nadopted_male);
	});
	
	var legend = svg.selectAll(".legend")
		.data(color.domain())
		.enter().append("g")
			.attr("class", "legend")
			.attr("transform", function(d, i) { return "translate(0," + i * legendOffset.y + ")"; });

	legend.append("rect")
		.attr("x", width - legendOffset.x)
		.attr("width", legendOffset.x - legendMargin.x)
		.attr("height", legendOffset.y - legendMargin.y)
		.style("fill", color);
		
	legend.append("text")
		.attr("x", width - legendOffset.x - legendMargin.x)
		.attr("y", legendOffset.y - legendMargin.y - legendTextHeightAdjuster)
		.attr("dy", legendTextSize)
		.style("text-anchor", "end")
		.text(function(d) { return d; });
</script>

<input type="button" class="sexy-button" onclick="changeView()" value="Change View" />
<input type="button" class="sexy-button" onclick="changeScaleY()" value="Change Scale Y" />
<input type="button" class="sexy-button" onclick="changeScaleX()" value="Change Scale X" />